/* eslint-disable @typescript-eslint/no-explicit-any */
// import type { NextApiRequest, NextApiResponse } from "next";

import { NextApiRequest } from "next";
// import {NextApiResponse} from "next";
// import { PrivyClient, AuthTokenClaims } from "@privy-io/server-auth";
import { PrivyClient } from "@privy-io/server-auth";
// import {AuthTokenClaims} from "@privy-io/server-auth";

const PRIVY_APP_ID = process.env.NEXT_PUBLIC_PRIVY_APP_ID;
const PRIVY_APP_SECRET = process.env.PRIVY_APP_SECRET;
const client = new PrivyClient(PRIVY_APP_ID!, PRIVY_APP_SECRET!);
import { NextResponse } from 'next/server'


// export type AuthenticateSuccessResponse = {
//   claims: AuthTokenClaims;
// };

// export type AuthenticationErrorResponse = {
//   error: string;
// };


export const GET = async (req: NextApiRequest) => {

  const headerAuthToken = req.headers.authorization?.replace(/^Bearer /, "");
  const cookieAuthToken = req.cookies["privy-token"];

  const authToken = cookieAuthToken || headerAuthToken;
  if (!authToken) {
    // return res.status(401).json({ error: "Missing auth token" });
    return NextResponse.json({ auth:req.headers.authorization, headers: req.headers, req: req, error: "Missing auth token" });
  }

  try {
    const claims = await client.verifyAuthToken(authToken);
  //   return res.status(200).json({ claims });
  return NextResponse.json({ claims });

  //   // eslint-disable-next-line @typescript-eslint/no-explicit-any
  } catch (e: any) {
  //   return res.status(401).json({ error: e.message });
  // return NextResponse.status(401).json({ error: e.message });
  return NextResponse.json({ error: e.message });

  }

  // const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
  // const data = await response.json();
  // console.log(data);
  // return data;
  // return NextResponse.json({ msg: 'Hello from server' })

};
